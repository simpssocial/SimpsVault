// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.18;

import {Test, console2} from "forge-std/Test.sol";
import {Simps} from "../src/Simps.sol";

contract SimpsTest is Test {
    Simps public simps;
    address simp = address(0x1);
    address thot = address(0x2);

    function setUp() public {
        simps = new Simps();
        vm.deal(simp, 10000 ether);
        vm.deal(thot, 10000 ether);
    }

    function test_SimpsSigmoidPrices() view public {
        // simps.buyShares{value: price}(thot, 1);
        // assertEq(simps.sharesBalance(thot, thot), 2);
        int256 currentLimit = 1200;
        int256 maxPrice = 2500;
        int256 steepness = 100_000;

        for (uint256 i = 1; i <= 200; i++) {
            uint256 price = simps.getPriceSigmoid(i, currentLimit, maxPrice, steepness);
        }
    }

    function test_SimpsBuyShare() public {
        vm.prank(simp);
        uint256 roomNumber = simps.createRoom(Simps.Curves.Quadratic, 16000);

        uint256 price = simps.getPrice(0, 1);
        simps.buyShares{value: price}(thot, 1);
        assertEq(simps.sharesBalance(thot, thot), 2);
    }

    function test_SimpsBuyAndCreateRoom() public {
        vm.prank(simp);
        uint256 roomNumber = simps.createRoomAndBuyShares(Simps.Curves.Quadratic, 16000);

        uint256 price = simps.getPrice(0, 1);
        simps.buyShares{value: price}(thot, 1);
        assertEq(simps.sharesBalance(thot, thot), 2);
    }

    /*
    function test_SimpsBuyMultipleShares() public {
        vm.startPrank(thot);
        for (uint i = 1; i <= 500; i++) {

            uint256 price = simps.getPriceQuadratic(i, 1);
            uint256 friendPrice = simps.getPriceFriend(i, 1);
            uint256 linearPrice = simps.getPriceLinear(i, 1);

            // console2.log(i, price, friendPrice, linearPrice);
        }
        vm.stopPrank();
    }

    function test_SimpsSellMultipleShares() public {
        vm.startPrank(thot);

        for (uint i = 500; i >= 1; i--) {

            uint256 price = simps.getPriceQuadratic(i - 1, 1);
            uint256 friendPrice = simps.getPriceFriend(i - 1, 1);
            uint256 linearPrice = simps.getPriceLinear(i, 1);

            // console2.log(i, price, friendPrice, linearPrice);
        }
        vm.stopPrank();
    }
    */
    
}


